Project libft in 42 school. Only the following libc functions are allowed : malloc(3), free(3) and write(2), and their usage is restricted. You must include the necessary include system files to use one or more of the three authorized functions in your .c files. The only additional system include file you are allowed to use is string.h to have access to the constant NULL and to the type size_t. Everything else if forbidden.

All my libft functions prototypes below.

void                *ft_memset(void *b, int c, size_t len);
void                ft_bzero(void *s, size_t n);
void                *ft_memcpy(void *dst, const void *src, size_t n);
void                *ft_memccpy(void *dst, const void *src, int c, size_t n);
void                *ft_memmove(void    *dst, const void *src, size_t len);
void                *ft_memchr(const void *s, int c, size_t n);
int                 ft_memcmp(const void *s1, const void *s2, size_t n);
size_t              ft_strlen(const char *s);
char                *ft_strdup(const char *src);
char                *ft_strcpy(char *dst, const char *src);
char                *ft_strncpy(char *dst, const char *src, size_t len);
char                *ft_strcat(char *s1, const char *s2);
char                *ft_strncat(char *s1, const char *s2, size_t n);
size_t              ft_strlcat(char *dst, const char *src, size_t dstsize);
char                *ft_strchr(const char *s, int c);
char                *ft_strrchr(const char *s, int c);
char                *ft_strstr(const char *haystack, const char *needle);
int                	ft_strcmp(const char *s1, const char *s2);
int                	ft_strncmp(const char *s1, const char *s2, size_t n);
char                *ft_strnstr(const char *haystack, const char *needle, size_t len);
int                 ft_atoi(const char *str);
int                 ft_isalpha(int c);
int                 ft_isdigit(int c);
int                 ft_isalnum(int c);
int                	ft_isascii(int c);
int                 ft_isprint(int c);
int                 ft_toupper(int c);
int                 ft_tolower(int c);

void                *ft_memalloc(size_t size);
void                ft_memdel(void **ap);
char                *ft_strnew(size_t size);
void                ft_strdel(char **ap);
void                ft_strclr(char *s);
void                ft_striter(char *s, void (*f)(char *));
void                ft_striteri(char *s, void (*f)(unsigned int, char *));
char                *ft_strmap(char const *s, char (*f)(char));
char                *ft_strmapi(char const *s, char (*f)(unsigned int, char));
int                 ft_strequ(char const *s1, char const *s2);
int                 ft_strnequ(char const *s1, char const *s2, size_t n);
char                *ft_strsub(char const *s, unsigned int start, size_t len);
char                *ft_strjoin(char const *s1, char const *s2);
char                *ft_itoa(int n);
char                *ft_strtrim(char const *s);
char                **ft_strsplit(char const *s, char c);
void                ft_putchar(char c);
void                ft_putstr(char const *s);
void                ft_putendl(char const *s);
void                ft_putnbr(int n);
void                ft_putchar_fd(char c, int fd);
void                ft_putstr_fd(char const *s, int fd);
void                ft_putendl_fd(char const *s, int fd);
void                ft_putnbr_fd(int n, int fd);

t_list              *ft_lstnew(void const *content, size_t content_size);
void                ft_lstdelone(t_list **alst, void (*del)(void *, size_t));
void                ft_lstiter(t_list *lst, void (*f)(t_list *elem));
void                ft_lstadd(t_list **alst, t_list *new);
void                ft_lstdel(t_list **alst, void (*del)(void *, size_t));
t_list              *ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem));

int                 ft_mycount_words(const char *s);
void                ft_myrev(char *s);
void                ft_foreach(int *tab, int length, void (*f)(int));
int                 ft_myfactor(int nb);
int                 ft_mypower(int nb, int power);
